#!/usr/bin/env node

const http = require('http');
const mongodber = require('../utils/mongodber');
const config = require('config')
// 数据库初始化
async function initDb() {
  let databases = config.get('MONGODBS');
  await mongodber.init(databases);
}


(async function init() {
  // 初始化数据库连接
  await initDb();
  const app = require('../app');
  const port = process.env.PORT || config.get('PORT');
  app.set('port', port);
  const server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
})();


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */


process.on('uncaughtException', function (err) {
  console.error('Caught exception: ' + err.stack);
});